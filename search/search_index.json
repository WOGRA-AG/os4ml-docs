{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open space for Machine Learning ( Os4ML ) is an open source platform for automated machine learning. The goal is to enable non-experts to solve every day problems with AI. It automates all steps on the way to the finished AI model with the help of an intuitive UI/UX. About the Project The project focuses on easy installation, intuitive UI/UX and comfortable machine learning. We're not reinventing the wheel. Whenever possible, we use third-party open source software. The project is in an early phase, i.e. everything is work in progress and experimental. In the fall of 2022, we had an alpha release for a select group of users. Since then, we have stabilized the platform and have opened it up to a wider range of users. You can request a demo here . License Os4ML is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0). See LICENSE-APACHE , LICENSE-MIT , and COPYRIGHT for details.","title":"Os4ML"},{"location":"#about-the-project","text":"The project focuses on easy installation, intuitive UI/UX and comfortable machine learning. We're not reinventing the wheel. Whenever possible, we use third-party open source software. The project is in an early phase, i.e. everything is work in progress and experimental. In the fall of 2022, we had an alpha release for a select group of users. Since then, we have stabilized the platform and have opened it up to a wider range of users. You can request a demo here .","title":"About the Project"},{"location":"#license","text":"Os4ML is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0). See LICENSE-APACHE , LICENSE-MIT , and COPYRIGHT for details.","title":"License"},{"location":"about_us/","text":"About Us Os4ML is a project of the WOGRA AG research group in cooperation with the German Aerospace Center and is funded by the Ministry of Economic Affairs, Regional Development and Energy as part of the High Tech Agenda of the Free State of Bavaria.","title":"About Us"},{"location":"about_us/#about-us","text":"Os4ML is a project of the WOGRA AG research group in cooperation with the German Aerospace Center and is funded by the Ministry of Economic Affairs, Regional Development and Energy as part of the High Tech Agenda of the Free State of Bavaria.","title":"About Us"},{"location":"architecture/","text":"Architecture Os4ML is designed as open source cloud-native application which runs on Kubernetes clusters. On the one hand it consists of a set of multiple python services using FastAPI and an Angular frontend. On the other hand it uses standard frameworks for common problems like Keycloak for authorization, Istio as ingress gateway, MinIO as high performance object storage and Kubeflow Pipelines as workflow engine. Thus, Os4ML benefits from the development performance of a strong open source community. This allows us to concentrate on high-level AI solutions.","title":"Architecture"},{"location":"architecture/#architecture","text":"Os4ML is designed as open source cloud-native application which runs on Kubernetes clusters. On the one hand it consists of a set of multiple python services using FastAPI and an Angular frontend. On the other hand it uses standard frameworks for common problems like Keycloak for authorization, Istio as ingress gateway, MinIO as high performance object storage and Kubeflow Pipelines as workflow engine. Thus, Os4ML benefits from the development performance of a strong open source community. This allows us to concentrate on high-level AI solutions.","title":"Architecture"},{"location":"examples/","text":"Examples Here you can find some examples demonstrating the usage of our platform. Titanic The titanic dataset is a list of the passengers of the Titanic ship along with the information about their survival. It is a common dataset for demonstrating classification tasks. You can follow the tutorial to upload the data, train a solution and make a new prediction. Our solution is trained quite fast and achieves an coefficient of determination of 0.82. Mnist Mnist is the most famous dataset for image classification tasks. It contains 70,000 images of handwritten digits, and the task is to classify each image into a digit. Here you can find an already prepared zip file to upload to our platform. Create a solution by choosing the label column as the output column and wait until it is finished. After just 15 minutes of training, the solution is done and achieves an accuracy of 99%.","title":"Examples"},{"location":"examples/#examples","text":"Here you can find some examples demonstrating the usage of our platform.","title":"Examples"},{"location":"examples/#titanic","text":"The titanic dataset is a list of the passengers of the Titanic ship along with the information about their survival. It is a common dataset for demonstrating classification tasks. You can follow the tutorial to upload the data, train a solution and make a new prediction. Our solution is trained quite fast and achieves an coefficient of determination of 0.82.","title":"Titanic"},{"location":"examples/#mnist","text":"Mnist is the most famous dataset for image classification tasks. It contains 70,000 images of handwritten digits, and the task is to classify each image into a digit. Here you can find an already prepared zip file to upload to our platform. Create a solution by choosing the label column as the output column and wait until it is finished. After just 15 minutes of training, the solution is done and achieves an accuracy of 99%.","title":"Mnist"},{"location":"file_formats/","text":"File formats The following file formats are supported: Tabular data type suffix example csv .csv Titanic dataset csv Excel .xls, .xlsx, .xlsm, .xlsb, .odf, .ods Titanic dataset excel The first row contains the names of the columns. Only the first sheet of the Excel file is used. csv format All common delimiters, including commas, colons, semicolons and tabs, are supported. For floating point numbers, please use dots as the decimal separator. Below is an example of a valid CSV file: name,number,double \"Ford, Henry\",1.4,2.8 \"Benz, Carl\",7.5,15.0 Load additional files (e.g. images) To load additional files such as images, create a column in the tabular dataset (csv or excel) with the file names. Create a zip file with the tabular file and the additional files. Pack the files directly into the zip file, do not compress the folder containing the files. The zip file should contain only one csv file. The system will automatically detect that the column contains file names, and if they are present in the zip file, they will be loaded into your databag. type suffix example zip file .zip Mnist zip Example structue of a zip file: mnist.zip \u251c\u2500 10.jpg \u251c\u2500 20.jpg \u251c\u2500 24.jpg \u2514\u2500 mnist.csv Content of the mnist.csv: image,digit 10.jpg,3 20.jpg,4 24.jpg,1 Supported image files are: .jpg, .jpeg, .png, .tiff Currently only image files are supported, but in the future other files will be supported as well Scripts type suffix example python script .py Python script You can also upload python scripts that create a pandas dataframe . The script should save the dataframe as a csv without index in the location specified by the --output arg. Examples for common Machine Learning Problems We will give some examples of how you can model your machine learning problem using the multimodal format. Image Classification Upload a zip file containing your images and a csv file with the image names and labels. The csv should look like this: image,digit 10.jpg,3 20.jpg,4 24.jpg,1 Image Captioning and Text2Image image,description tree.jpg,this is a tree in front of a house ball.jpg,a blue and white ball flowers.jpg,some flowers on a balcony If you have a dataset with images and corresponding descriptions, you can train an image captioning model, by specifying the description as the output column. If you choose the image as the output column you can train a text2image model. However, this is not yet supported by our solvers, but will be a future feature. Text classification text,sentiment he is a good boy,positive he is rude, negative Using a databag with a text column and a category column, you can model text classification tasks such as sentiment analysis. Neural Machine Translation english,deutsch boy,Junge italian,italienisch If you have a databag with translations from one language to another, you can train a neural machine translation model by simply selecting the desired language as the output column.","title":"File Formats"},{"location":"file_formats/#file-formats","text":"The following file formats are supported:","title":"File formats"},{"location":"file_formats/#tabular-data","text":"type suffix example csv .csv Titanic dataset csv Excel .xls, .xlsx, .xlsm, .xlsb, .odf, .ods Titanic dataset excel The first row contains the names of the columns. Only the first sheet of the Excel file is used.","title":"Tabular data"},{"location":"file_formats/#csv-format","text":"All common delimiters, including commas, colons, semicolons and tabs, are supported. For floating point numbers, please use dots as the decimal separator. Below is an example of a valid CSV file: name,number,double \"Ford, Henry\",1.4,2.8 \"Benz, Carl\",7.5,15.0","title":"csv format"},{"location":"file_formats/#load-additional-files-eg-images","text":"To load additional files such as images, create a column in the tabular dataset (csv or excel) with the file names. Create a zip file with the tabular file and the additional files. Pack the files directly into the zip file, do not compress the folder containing the files. The zip file should contain only one csv file. The system will automatically detect that the column contains file names, and if they are present in the zip file, they will be loaded into your databag. type suffix example zip file .zip Mnist zip Example structue of a zip file: mnist.zip \u251c\u2500 10.jpg \u251c\u2500 20.jpg \u251c\u2500 24.jpg \u2514\u2500 mnist.csv Content of the mnist.csv: image,digit 10.jpg,3 20.jpg,4 24.jpg,1 Supported image files are: .jpg, .jpeg, .png, .tiff Currently only image files are supported, but in the future other files will be supported as well","title":"Load additional files (e.g. images)"},{"location":"file_formats/#scripts","text":"type suffix example python script .py Python script You can also upload python scripts that create a pandas dataframe . The script should save the dataframe as a csv without index in the location specified by the --output arg.","title":"Scripts"},{"location":"file_formats/#examples-for-common-machine-learning-problems","text":"We will give some examples of how you can model your machine learning problem using the multimodal format.","title":"Examples for common Machine Learning Problems"},{"location":"file_formats/#image-classification","text":"Upload a zip file containing your images and a csv file with the image names and labels. The csv should look like this: image,digit 10.jpg,3 20.jpg,4 24.jpg,1","title":"Image Classification"},{"location":"file_formats/#image-captioning-and-text2image","text":"image,description tree.jpg,this is a tree in front of a house ball.jpg,a blue and white ball flowers.jpg,some flowers on a balcony If you have a dataset with images and corresponding descriptions, you can train an image captioning model, by specifying the description as the output column. If you choose the image as the output column you can train a text2image model. However, this is not yet supported by our solvers, but will be a future feature.","title":"Image Captioning and Text2Image"},{"location":"file_formats/#text-classification","text":"text,sentiment he is a good boy,positive he is rude, negative Using a databag with a text column and a category column, you can model text classification tasks such as sentiment analysis.","title":"Text classification"},{"location":"file_formats/#neural-machine-translation","text":"english,deutsch boy,Junge italian,italienisch If you have a databag with translations from one language to another, you can train a neural machine translation model by simply selecting the desired language as the output column.","title":"Neural Machine Translation"},{"location":"installation/","text":"Installation Nobody wants complicated installations. We neither. For this reason we provided Terraform scripts in the past to install fully functional Os4ML on a k3d cluster. k3d cluster k3d says it's 'a lightweight wrapper to run k3s (Rancher Lab\u2019s minimal Kubernetes distribution) in docker'. Well yes, that's what it does, and it does it great. We use k3d for daily development. Thus, you can assume that Os4ML runs stably on k3d . With k3d you can do it like this, for example git clone https://github.com/WOGRA-AG/terraform-kustomization-os4ml.git cd terraform-kustomization-os4ml k3d cluster create --config ./k3d-default.yaml terraform init terraform apply -auto-approve This will install ArgoCD in the cluster and then ArgoCD will then take care of installing Os4ml on its own. GPU Support For sure, if you want to do machine learning, you want to use GPUs. So, what about GPU support? Os4ML automatically uses GPUs if they are available in the Kubernetes cluster. Unfortunately, GPUs are known to be a topic of their own. k3d describes it in their documentation here . If you have problems building the Docker image, remember to install the nvidia-container-toolkit in addition to the nvidia-container-runtime .","title":"Installation"},{"location":"installation/#installation","text":"Nobody wants complicated installations. We neither. For this reason we provided Terraform scripts in the past to install fully functional Os4ML on a k3d cluster.","title":"Installation"},{"location":"installation/#k3d-cluster","text":"k3d says it's 'a lightweight wrapper to run k3s (Rancher Lab\u2019s minimal Kubernetes distribution) in docker'. Well yes, that's what it does, and it does it great. We use k3d for daily development. Thus, you can assume that Os4ML runs stably on k3d . With k3d you can do it like this, for example git clone https://github.com/WOGRA-AG/terraform-kustomization-os4ml.git cd terraform-kustomization-os4ml k3d cluster create --config ./k3d-default.yaml terraform init terraform apply -auto-approve This will install ArgoCD in the cluster and then ArgoCD will then take care of installing Os4ml on its own.","title":"k3d cluster"},{"location":"installation/#gpu-support","text":"For sure, if you want to do machine learning, you want to use GPUs. So, what about GPU support? Os4ML automatically uses GPUs if they are available in the Kubernetes cluster. Unfortunately, GPUs are known to be a topic of their own. k3d describes it in their documentation here . If you have problems building the Docker image, remember to install the nvidia-container-toolkit in addition to the nvidia-container-runtime .","title":"GPU Support"},{"location":"introduction/","text":"Introduction Let's first start with the basic terminology of os4ml. It is illustrated in the following picture: Databag A databag is a convenient container for storing your data. You can easily create a databag by following the instructions in this tutorial , or explore the various file formats you can upload here . To manage the diversity of data types, we use the concept of multimodal data. Think of multimodal data as a table where each column is associated with a specific datatype, and the rows represent data corresponding to these columns. The petfinder dataset is an excellent example of multimodal data. For instance, it features Fenny, a dog(type 1) who is five years old and has been waiting for adoption for 100 days (AdoptionSpeed 4). The columns Type and AdoptionSpeed are categorical, the column Name contains text data, and Age is a numerical value. Additionally, the Image column contains image data. Problem Based on a databag, you can define a problem to be solved by specifying one or more output columns to be predicted. In the petfinder dataset example, you would typically want to predict the 'AdoptionSpeed' column. Here you can find more examples that illustrate how to model your machine learning problem using the multimodal approach. Solver A Solver is an abstraction of an AI algorithm that can solve a specific problem, by training an AI model on data from a Databag to predict the specified columns. To explore available solvers, check out this list . Solution When a solver is executed on a problem , it produces a solution that can be used to predict values for unseen data. To learn how to create a solution using a solver, check out this tutorial .","title":"Introduction"},{"location":"introduction/#introduction","text":"Let's first start with the basic terminology of os4ml. It is illustrated in the following picture:","title":"Introduction"},{"location":"introduction/#databag","text":"A databag is a convenient container for storing your data. You can easily create a databag by following the instructions in this tutorial , or explore the various file formats you can upload here . To manage the diversity of data types, we use the concept of multimodal data. Think of multimodal data as a table where each column is associated with a specific datatype, and the rows represent data corresponding to these columns. The petfinder dataset is an excellent example of multimodal data. For instance, it features Fenny, a dog(type 1) who is five years old and has been waiting for adoption for 100 days (AdoptionSpeed 4). The columns Type and AdoptionSpeed are categorical, the column Name contains text data, and Age is a numerical value. Additionally, the Image column contains image data.","title":"Databag"},{"location":"introduction/#problem","text":"Based on a databag, you can define a problem to be solved by specifying one or more output columns to be predicted. In the petfinder dataset example, you would typically want to predict the 'AdoptionSpeed' column. Here you can find more examples that illustrate how to model your machine learning problem using the multimodal approach.","title":"Problem"},{"location":"introduction/#solver","text":"A Solver is an abstraction of an AI algorithm that can solve a specific problem, by training an AI model on data from a Databag to predict the specified columns. To explore available solvers, check out this list .","title":"Solver"},{"location":"introduction/#solution","text":"When a solver is executed on a problem , it produces a solution that can be used to predict values for unseen data. To learn how to create a solution using a solver, check out this tutorial .","title":"Solution"},{"location":"solvers/","text":"Solvers Here you can find an overview of the currently supported solvers: Ludwig-Solver The Ludwig-Solver is based on ludwig . Ludwig uses pytorch to create Encode-Combiner-Decoder models. A mixture of best practices and Hyperparameter Optimization strategies are used to train the model.","title":"Solvers"},{"location":"solvers/#solvers","text":"Here you can find an overview of the currently supported solvers:","title":"Solvers"},{"location":"solvers/#ludwig-solver","text":"The Ludwig-Solver is based on ludwig . Ludwig uses pytorch to create Encode-Combiner-Decoder models. A mixture of best practices and Hyperparameter Optimization strategies are used to train the model.","title":"Ludwig-Solver"},{"location":"transfer_learning/","text":"Transfer Learning In machine learning, often existing models are used for training for a new task instead of training a new model from scratch. This speeds up the training process and can lead to better results. This is called Transfer Learning. With Os4ML you have two options for transfer learning. Either you choose a pre-defined model or you choose on of your own solutions. Pre-defined models Currently the follwoing models from HuggingFace are available for text inputs: BERT: a bidrectional transformer developed by Google DistilBERT: a smaller and faster BERT variant ALBERT: BERT with lower memory usage The following models from TorchVision are available for image inputs: ResNet: commonly known architecture for computer vision tasks VisionTransformer: transformer architecture for vision tasks MobileNet V3: model optimized for mobile, so it uses less memory and computational resources","title":"Transfear Learning"},{"location":"transfer_learning/#transfer-learning","text":"In machine learning, often existing models are used for training for a new task instead of training a new model from scratch. This speeds up the training process and can lead to better results. This is called Transfer Learning. With Os4ML you have two options for transfer learning. Either you choose a pre-defined model or you choose on of your own solutions.","title":"Transfer Learning"},{"location":"transfer_learning/#pre-defined-models","text":"Currently the follwoing models from HuggingFace are available for text inputs: BERT: a bidrectional transformer developed by Google DistilBERT: a smaller and faster BERT variant ALBERT: BERT with lower memory usage The following models from TorchVision are available for image inputs: ResNet: commonly known architecture for computer vision tasks VisionTransformer: transformer architecture for vision tasks MobileNet V3: model optimized for mobile, so it uses less memory and computational resources","title":"Pre-defined models"},{"location":"tutorial/","text":"Tutorial Follow this guide to go step by step to get a prediction based on your data. Create a Databag Therefore, open the create Databag dialog, give it a name and upload your data. You can see expected format of your data here . If you don't have your own data or you just want to play around, you can use the titanic dataset . Proceed and wait until the dataset is uploaded and inspected (this may take a while) Create a Solution Open the create solution dialog and select the databag you just created (if it isn't already selected). Define the Problem on your Databag by specifing the output and give the solution a name. In case of the titanic dataset choose the column Survived . In the Select input drop-down, you could deselect some inputs to exclude them from the Solver, but for now let's just use all inputs. Transfer learning is an advanced feature, so let's use the default values and just click Submit Solution . Currently only the Ludwig solver is available, but in future you will be able to select different ones. You can check the list of available solvers here . Again wailt until the solution is done (this may take a while). Create a Prediction Open the create prediction dialog and select the solution you just created (if it isn't already selected). Enter the name of your prediction and upload your data. You can download a template to see how your data should look like. Wait once more until the prediction is done (this may take a while). You can now download and inspect the results of your prediction.","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"Follow this guide to go step by step to get a prediction based on your data.","title":"Tutorial"},{"location":"tutorial/#create-a-databag","text":"Therefore, open the create Databag dialog, give it a name and upload your data. You can see expected format of your data here . If you don't have your own data or you just want to play around, you can use the titanic dataset . Proceed and wait until the dataset is uploaded and inspected (this may take a while)","title":"Create a Databag"},{"location":"tutorial/#create-a-solution","text":"Open the create solution dialog and select the databag you just created (if it isn't already selected). Define the Problem on your Databag by specifing the output and give the solution a name. In case of the titanic dataset choose the column Survived . In the Select input drop-down, you could deselect some inputs to exclude them from the Solver, but for now let's just use all inputs. Transfer learning is an advanced feature, so let's use the default values and just click Submit Solution . Currently only the Ludwig solver is available, but in future you will be able to select different ones. You can check the list of available solvers here . Again wailt until the solution is done (this may take a while).","title":"Create a Solution"},{"location":"tutorial/#create-a-prediction","text":"Open the create prediction dialog and select the solution you just created (if it isn't already selected). Enter the name of your prediction and upload your data. You can download a template to see how your data should look like. Wait once more until the prediction is done (this may take a while). You can now download and inspect the results of your prediction.","title":"Create a Prediction"}]}