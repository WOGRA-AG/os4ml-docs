{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open space for Machine Learning ( Os4ML ) is an open source platform for automated machine learning. The goal is to enable non-experts to solve every day problems with AI. It automates all steps on the way to the finished AI model with the help of an intuitive UI/UX. About the Project The project focuses on easy installation, intuitive UI/UX and comfortable machine learning. We're not reinventing the wheel. Whenever possible, we use third-party open source software. The project is in an early phase, i.e. everything is work in progress and experimental. In the fall of 2022, we had an alpha release for a select group of users. We are currently in the process of stabilizing the platform so that we can open it up to a wider range of users in spring 2023. License Os4ML is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0). See LICENSE-APACHE , LICENSE-MIT , and COPYRIGHT for details.","title":"Os4ML"},{"location":"#about-the-project","text":"The project focuses on easy installation, intuitive UI/UX and comfortable machine learning. We're not reinventing the wheel. Whenever possible, we use third-party open source software. The project is in an early phase, i.e. everything is work in progress and experimental. In the fall of 2022, we had an alpha release for a select group of users. We are currently in the process of stabilizing the platform so that we can open it up to a wider range of users in spring 2023.","title":"About the Project"},{"location":"#license","text":"Os4ML is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0). See LICENSE-APACHE , LICENSE-MIT , and COPYRIGHT for details.","title":"License"},{"location":"about_us/","text":"About Us Os4ML is a project of the WOGRA AG research group in cooperation with the German Aerospace Center and is funded by the Ministry of Economic Affairs, Regional Development and Energy as part of the High Tech Agenda of the Free State of Bavaria.","title":"About Us"},{"location":"about_us/#about-us","text":"Os4ML is a project of the WOGRA AG research group in cooperation with the German Aerospace Center and is funded by the Ministry of Economic Affairs, Regional Development and Energy as part of the High Tech Agenda of the Free State of Bavaria.","title":"About Us"},{"location":"architecture/","text":"Architecture Os4ML is designed as open source cloud-native application which runs on Kubernetes clusters. On the one hand it consists of a set of multiple python services using FastAPI and an Angular frontend. On the other hand it uses standard frameworks for common problems like Keycloak for authorization, Istio as ingress gateway, MinIO as high performance object storage and Kubeflow Pipelines as workflow engine. Thus, Os4ML benefits from the development performance of a strong open source community. This allows us to concentrate on high-level AI solutions.","title":"Architecture"},{"location":"architecture/#architecture","text":"Os4ML is designed as open source cloud-native application which runs on Kubernetes clusters. On the one hand it consists of a set of multiple python services using FastAPI and an Angular frontend. On the other hand it uses standard frameworks for common problems like Keycloak for authorization, Istio as ingress gateway, MinIO as high performance object storage and Kubeflow Pipelines as workflow engine. Thus, Os4ML benefits from the development performance of a strong open source community. This allows us to concentrate on high-level AI solutions.","title":"Architecture"},{"location":"file_formats/","text":"File formats The following file formats are supported: Tabular data type suffix example csv .csv Titanic dataset csv Excel .xls, .xlsx, .xlsm, .xlsb, .odf, .ods Titanic dataset excel The first row contains the names of the columns. Only the first sheet of the Excel file is used. csv format use standard csv files that meet the RFC 4180 standard, e.g. this would be a valid csv file name,number,double \"Ford, Henry\",1.4,2.8 \"Benz, Carl\",7.5,15.0 Images for classification type suffix example zip file .zip Mnist zip The unpacked zip file should contain one folder (mnist_test in the example below) This folder should contain one folder for each label (0, 1) The label folders should contain the corresponding images Supported image files are: .jpg, .jpeg, .png, .tiff mnist_test \u251c\u2500\u2500 0 \u2502 \u251c\u2500\u2500 114.jpg ... \u251c\u2500\u2500 1 \u2502 \u251c\u2500\u2500 102.jpg \u2502 \u251c\u2500\u2500 104.jpg ... Scripts type suffix example python script .py Python script You can also upload python scripts that create a pandas dataframe . The script should save the dataframe as a csv without index in the location specified by the --output arg.","title":"File Formats"},{"location":"file_formats/#file-formats","text":"The following file formats are supported:","title":"File formats"},{"location":"file_formats/#tabular-data","text":"type suffix example csv .csv Titanic dataset csv Excel .xls, .xlsx, .xlsm, .xlsb, .odf, .ods Titanic dataset excel The first row contains the names of the columns. Only the first sheet of the Excel file is used.","title":"Tabular data"},{"location":"file_formats/#csv-format","text":"use standard csv files that meet the RFC 4180 standard, e.g. this would be a valid csv file name,number,double \"Ford, Henry\",1.4,2.8 \"Benz, Carl\",7.5,15.0","title":"csv format"},{"location":"file_formats/#images-for-classification","text":"type suffix example zip file .zip Mnist zip The unpacked zip file should contain one folder (mnist_test in the example below) This folder should contain one folder for each label (0, 1) The label folders should contain the corresponding images Supported image files are: .jpg, .jpeg, .png, .tiff mnist_test \u251c\u2500\u2500 0 \u2502 \u251c\u2500\u2500 114.jpg ... \u251c\u2500\u2500 1 \u2502 \u251c\u2500\u2500 102.jpg \u2502 \u251c\u2500\u2500 104.jpg ...","title":"Images for classification"},{"location":"file_formats/#scripts","text":"type suffix example python script .py Python script You can also upload python scripts that create a pandas dataframe . The script should save the dataframe as a csv without index in the location specified by the --output arg.","title":"Scripts"},{"location":"installation/","text":"Installation Nobody wants complicated installations. We neither. For this reason we provided Terraform scripts in the past to install fully functional Os4ML on a k3d cluster. k3d cluster k3d says it's 'a lightweight wrapper to run k3s (Rancher Lab\u2019s minimal Kubernetes distribution) in docker'. Well yes, that's what it does, and it does it great. We use k3d for daily development. Thus, you can assume that Os4ML runs stably on k3d . With k3d you can do it like this, for example k3d cluster create --image rancher/k3s:v1.21.7-k3s1 os4ml-cluster REMARK: We recommend to use the k3s:v1.21.7-k3s1 image in order to avoid API conflicts. Terraform This is work in progress, stay tuned till October 11th! GPU Support For sure, if you want to do machine learning, you want to use GPUs. So, what about GPU support? Os4ML automatically uses GPUs if they are available in the Kubernetes cluster. Unfortunately, GPUs are known to be a topic of their own. k3d describes it in their documentation here . If you have problems building the Docker image, remember to install the nvidia-container-toolkit in addition to the nvidia-container-runtime .","title":"Installation"},{"location":"installation/#installation","text":"Nobody wants complicated installations. We neither. For this reason we provided Terraform scripts in the past to install fully functional Os4ML on a k3d cluster.","title":"Installation"},{"location":"installation/#k3d-cluster","text":"k3d says it's 'a lightweight wrapper to run k3s (Rancher Lab\u2019s minimal Kubernetes distribution) in docker'. Well yes, that's what it does, and it does it great. We use k3d for daily development. Thus, you can assume that Os4ML runs stably on k3d . With k3d you can do it like this, for example k3d cluster create --image rancher/k3s:v1.21.7-k3s1 os4ml-cluster REMARK: We recommend to use the k3s:v1.21.7-k3s1 image in order to avoid API conflicts.","title":"k3d cluster"},{"location":"installation/#terraform","text":"This is work in progress, stay tuned till October 11th!","title":"Terraform"},{"location":"installation/#gpu-support","text":"For sure, if you want to do machine learning, you want to use GPUs. So, what about GPU support? Os4ML automatically uses GPUs if they are available in the Kubernetes cluster. Unfortunately, GPUs are known to be a topic of their own. k3d describes it in their documentation here . If you have problems building the Docker image, remember to install the nvidia-container-toolkit in addition to the nvidia-container-runtime .","title":"GPU Support"},{"location":"introduction/","text":"Introduction Let's start with the basic Terminology of os4ml first. Databag A databag is a container for your data. Learn how to create a databag here or see the different types of files you can upload here . Solver A solver is an abstraction of a specific AI algorithm. It trains an AI model on the data of a databag. Here you can find a list of all available solvers. Solution A run of a solver on a databag is called Solution. The solution stores additional information, such as the columns of the databag that get predicted. You can follow the tutorial to create one.","title":"Introduction"},{"location":"introduction/#introduction","text":"Let's start with the basic Terminology of os4ml first.","title":"Introduction"},{"location":"introduction/#databag","text":"A databag is a container for your data. Learn how to create a databag here or see the different types of files you can upload here .","title":"Databag"},{"location":"introduction/#solver","text":"A solver is an abstraction of a specific AI algorithm. It trains an AI model on the data of a databag. Here you can find a list of all available solvers.","title":"Solver"},{"location":"introduction/#solution","text":"A run of a solver on a databag is called Solution. The solution stores additional information, such as the columns of the databag that get predicted. You can follow the tutorial to create one.","title":"Solution"},{"location":"solvers/","text":"Solvers Here you can find an overview of the currently supported solvers: Ludwig-Solver The Ludwig-Solver is based on ludwig . It supports the following tasks: Classification: image + tabular Regression","title":"Solvers"},{"location":"solvers/#solvers","text":"Here you can find an overview of the currently supported solvers:","title":"Solvers"},{"location":"solvers/#ludwig-solver","text":"The Ludwig-Solver is based on ludwig . It supports the following tasks: Classification: image + tabular Regression","title":"Ludwig-Solver"},{"location":"tutorial/","text":"Tutorial Run Fast-lane Open get started dialog in the bottom left Choose a name for the databag Upload the dataset file Either upload the file directly of pass a valid url to it See File formats for more information on the supported file formats. Proceed and wait until the dataset is uploaded and inspected (this may take a while) Select the column you want to predict Choose a name and a solver for the Solution. See Solvers for more information on the available solvers. Wait until the solver is done Download Model After a solution is successfully created, you can download the trained model. You can load the extracted zip file with the following code to get the LudwigModel: from ludwig.api import LudwigModel path_to_extracted_zip = './model.os4ml/' model = LudwigModel.load(path_to_extracted_zip) Use the model.predict() method to make predictions.","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"tutorial/#run-fast-lane","text":"Open get started dialog in the bottom left Choose a name for the databag Upload the dataset file Either upload the file directly of pass a valid url to it See File formats for more information on the supported file formats. Proceed and wait until the dataset is uploaded and inspected (this may take a while) Select the column you want to predict Choose a name and a solver for the Solution. See Solvers for more information on the available solvers. Wait until the solver is done","title":"Run Fast-lane"},{"location":"tutorial/#download-model","text":"After a solution is successfully created, you can download the trained model. You can load the extracted zip file with the following code to get the LudwigModel: from ludwig.api import LudwigModel path_to_extracted_zip = './model.os4ml/' model = LudwigModel.load(path_to_extracted_zip) Use the model.predict() method to make predictions.","title":"Download Model"}]}